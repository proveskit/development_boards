#include <stdio.h>
#include <stdlib.h>
#include <main/main.h>
#include <neopixel/neopixel.h>

#include "pico/stdlib.h"
#include "hardware/flash.h"
#include "hardware/pio.h"
#include "hardware/gpio.h"
#include "hardware/clocks.h"
#include "blink.pio.h"
#include "neopixel.pio.h"

void generate_blink_pio_sm(PIO pio, uint sm, uint pin, uint offset, float clk_freq);//method initialization

int main() {
    stdio_init_all();                                                               //initializing USB
    printf("Booting up!\n");
    PIO pio_0 = pio0;                                                               //choosing hardware pio0 to handle LED, WDT, and Neopixel
    uint offset_blink = pio_add_program(pio_0, &blink_program);                     //finding the blink program in memory and recording offset
    uint offset_neopixel = pio_add_program(pio_0, &neopixel_program);               //finding the neopxiel program in memory and recording offset
    static const float pio_freq = 2000;                                             //Desired pio clk freq (Hz)
    uint firm_active = 27;                                                          //LED pin to show the firmware is acive
    uint wdt = 21;                                                                  //Input pin for watchdog timer
    uint neo_pwr = 25;                                                              //power pin for neopixel
    uint neo_data = 24;                                                             //data pin for neopixel
    uint sm_firm = 0;                                                               //state machine for led blinking
    uint sm_wdt = 1;                                                                //state machine for watchdog timer 
    uint sm_neo = 2;                                                                //state machine for neopixel color changing
    uint loiter_time = 10;                                                          //time to wait until executing code
    generate_blink_pio_sm(pio_0,sm_firm,firm_active,offset_blink,pio_freq);         //call method to generate a state machine for blinking the firmware LED
    generate_blink_pio_sm(pio_0,sm_wdt,wdt,offset_blink,pio_freq);                  //call method to generate a state machine for pulsing Watchdog Timer
    gpio_init(neo_pwr);                                                             //initialize neopixel power pin
    gpio_set_dir(neo_pwr, GPIO_OUT);                                                //set to output
    gpio_put(neo_pwr, true);                                                        //set pin high
    neopixel_program_init(pio_0, sm_neo, offset_neopixel, neo_data, 800000, true);  //call function (generated by neopixel.pio) to initialize neopixel state machine
    neopixel neo(pio_0,sm_neo);                                                     //instantiate neopixel class and pass pio and state machine
    neo.put_pixel(neo.urgb_u32(0xFF,0x00,0xFF));                                    //set neopixel to purple
    printf("I am about to enter main in %d seconds!\n",loiter_time);
    for(uint i = 0; i < loiter_time; i++){
        sleep_ms(500);
        neo.put_pixel(neo.urgb_u32(0x00,0x00,0x00));
        sleep_ms(500);
        neo.put_pixel(neo.urgb_u32(0xFF,0x00,0xFF)); 
        printf("Entering main in %d seconds!\n",loiter_time-i-1);
    }
    main_program(neo);                                                              //enter main program
    return 0;
}

void generate_blink_pio_sm(PIO pio, uint sm, uint pin, uint offset, float clk_freq){
    float clk_div = (float)clock_get_hz(clk_sys) / clk_freq;                        //this will divide the 133MHz clk down to 2KHz
    blink_program_init(pio, sm, offset, pin, clk_div);                              //call function (generated by blink.pio) to initialize blink on any pin
    pio_sm_set_enabled(pio, sm, true);                                              //enable the state machine
    printf("pio state machine generated for pin %d \n", pin);
    return;
}

